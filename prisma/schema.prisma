// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FavoriteSport {
  BEACH_TENNIS
  BASKETBALL_HALL
  FOOT_VOLLEY
  FUTSAL_HALL
  HANDBALL_HALL
  VOLLEYBALL
  SOCIETY_SYNTHETIC
  TENNIS
  NONE
}

enum Role {
  PLAYER
  ARENA
  ADMIN
}

enum FavoriteTime {
  MORNING
  AFTERNOON
  NIGHT
  NONE
}

enum SportType {
  BEACH_TENNIS
  BASKETBALL_HALL
  FOOT_VOLLEY
  FUTSAL_HALL
  HANDBALL_HALL
  VOLLEYBALL
  SOCIETY_SYNTHETIC
  TENNIS
}

enum TypeCourt {
  SAND
  GRAVEL
  HALL
  NATURAL_GRASS
  SYNTHETIC_GRASS
}

model User {
  id               String           @id @default(uuid())
  name             String
  username         String
  nickname         String
  cellphone        String
  email            String           @unique
  password_hash    String
  avatar           String?
  cpf              String?
  favorite_sport   FavoriteSport
  favorite_time    FavoriteTime
  confirmed        Boolean          @default(false)
  role             Role             @default(PLAYER)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  credentials      Credentials?
  reservations     Reservation[]
  owned_arenas     Arena[]          @relation("owner")
  managed_arenas   ArenaManager[]
  oauth_providers  OAuthProvider[]
  blacklist_tokens BlacklistToken[]

  @@map("users")
}

model Credentials {
  id                  String   @id @default(uuid())
  version             Int      @default(0)
  last_password       String   @default("")
  password_updated_at DateTime @default(now())
  updated_at          DateTime @updatedAt
  user                User?    @relation(fields: [user_id], references: [id])
  user_id             String   @unique

  @@map("crendentials")
}

model BlacklistToken {
  token_id String
  user_id  String
  user     User   @relation(fields: [user_id], references: [id])

  @@id([token_id, user_id])
  @@map("blacklist_tokens")
}

model ArenaManager {
  id         Int    @id @default(autoincrement())
  arena      Arena  @relation(fields: [arena_id], references: [id])
  arena_id   String
  manager    User   @relation(fields: [manager_id], references: [id])
  manager_id String

  @@map("arenas_managers")
}

model Arena {
  id               String           @id @default(uuid())
  name             String
  cnpj             String           @unique
  phone            String
  is_validated     DateTime?
  address          Address          @relation(fields: [address_id], references: [id])
  address_id       String           @unique
  courts           Court[]
  owner            User             @relation("owner", fields: [owner_id], references: [id])
  owner_id         String
  managers         ArenaManager[]
  opening_hours    OpeningHours[]
  payment_gateways PaymentGateway[]

  @@map("arenas")
}

model Address {
  id          String  @id @default(uuid())
  description String
  lat         Decimal
  lon         Decimal
  arena       Arena?

  @@map("adresses")
}

model OpeningHours {
  id            String   @id @default(uuid())
  week_day      DaysWeek
  opening       Int
  closing       Int
  lunch_closing Int?
  lunch_opening Int?
  arena_id      String
  arena         Arena    @relation(fields: [arena_id], references: [id])

  @@map("opening_hours")
}

enum DaysWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model Court {
  id                  String        @id @default(uuid())
  name                String
  value_per_hour      Decimal
  type_court          TypeCourt
  sport_type          SportType
  dimensions          String?
  covered_court       Boolean       @default(false)
  court_digital_timer Boolean       @default(false)
  court_cam_replay    Boolean       @default(false)
  arena               Arena         @relation(fields: [arena_id], references: [id])
  arena_id            String
  reservations        Reservation[]

  @@map("courts")
}

model Reservation {
  id            String            @id @default(uuid())
  date          DateTime
  status        ReservationStatus @default(PENDING)
  court         Court             @relation(fields: [court_id], references: [id])
  court_id      String
  user          User              @relation(fields: [user_id], references: [id])
  user_id       String
  recurrence    Recurrence?       @relation(fields: [recurrence_id], references: [id])
  recurrence_id String?
  is_recurring  Boolean?          @default(false)
  payment       PaymentStatus?    @default(UNPAID)

  @@map("reservations")
}

model Recurrence {
  id           String             @id @default(uuid())
  start_date   DateTime
  end_date     DateTime
  start_time   DateTime
  end_time     DateTime
  interval     RecurrenceInterval
  reservations Reservation[]

  @@map("recurrences")
}

enum RecurrenceInterval {
  WEEKLY
  MONTHLY
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED_BY_TRANSACTION
  CANCELLED_BY_USER
  CANCELLEB_BY_MANAGER_OR_OWNER
}

enum PaymentStatus {
  PAID
  UNPAID
}

model PaymentGateway {
  id            String              @id @default(uuid())
  state         String              @unique
  type          PaymentGatewayType?
  access_token  String?
  refresh_token String?
  expires_in    Int?
  generated_at  DateTime            @default(now())
  arena         Arena               @relation(fields: [arena_id], references: [id])
  arena_id      String

  @@map("payment_gateways")
}

enum PaymentGatewayType {
  MERCADO_PAGO
}

model OAuthProvider {
  provider   OAuthProviderType
  user       User              @relation(fields: [user_id], references: [id])
  user_id    String
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt

  @@id([provider, user_id])
  @@map("oauth_providers")
}

enum OAuthProviderType {
  LOCAL
  GOOGLE
  APPLE
}
